import openai
from flask import Flask, render_template, request, flash
from dotenv import load_dotenv
import os
import re
import logging
from collections import defaultdict

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'your_secret_key')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR, filename="app_errors.log", format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á OpenAI –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
openai.api_key = os.getenv('OPENAI_API_KEY')
if not openai.api_key:
    raise ValueError("API-–∫–ª—é—á OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY.")

PLATFORM_PROMPTS = {
    "twitter": """–¢—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è Twitter (X).
–ù–∞–ø–∏—à–∏ —Ü–µ–ø–ª—è—é—â–∏–π —Ç–≤–∏—Ç –Ω–∞ —è–∑—ã–∫–µ {output_language} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏:
"{–ù–û–í–û–°–¢–¨}"
... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
"""
}

def generate_image(prompt):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é."""
    try:
        response = openai.images.generate(
            model="dall-e-3",
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            n=1,
        )
        return {"url": response.data[0].url, "error": None}

    except openai.APIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return {"url": None, "error": f"–û—à–∏–±–∫–∞ OpenAI: {e}"}
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return {"url": None, "error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"}

def generate_social_media_post(news_text, platform, output_language):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    prompt_template = PLATFORM_PROMPTS.get(platform)
    if not prompt_template:
        return {"text": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", "image_prompt": None, "success": False, "warning": None}

    prompt = prompt_template.format(–ù–û–í–û–°–¢–¨=news_text, output_language=output_language)

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=700,
            temperature=0.7,
        )
        full_response = response.choices[0].message.content.strip()

        match = re.search(r'üì∑ –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\s*(.*)', full_response, re.DOTALL)
        image_prompt = match.group(1).strip().strip('"') if match else None

        text_match = re.search(r'(.*?)(üîπ –¢–µ–ø–µ—Ä—å —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|üì∑ –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:)', full_response, re.DOTALL)
        post_text = text_match.group(1).strip() if text_match else full_response

        return {"text": post_text, "image_prompt": image_prompt, "success": True, "warning": None}

    except openai.APIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return {"text": f"–û—à–∏–±–∫–∞ OpenAI: {e}", "image_prompt": None, "success": False, "warning": None}
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return {"text": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", "image_prompt": None, "success": False, "warning": None}

@app.route('/', methods=['GET', 'POST'])
def index():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    generated_texts = {}
    if request.method == 'POST':
        news_text = request.form['news_text'].strip()
        platforms = request.form.getlist('platforms')
        output_language = request.form['output_language']

        if not news_text or not platforms:
            flash("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å.", "error")
            return render_template('index.html', generated_texts={})

        for platform in platforms:
            result = generate_social_media_post(news_text, platform, output_language)
            if result["success"]:
                if result["image_prompt"]:
                    image_result = generate_image(result["image_prompt"])
                    result["image_url"] = image_result["url"]
                    if image_result["error"]:
                        flash(f"–û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({platform}): {image_result['error']}", "error")
            generated_texts[platform] = result

    return render_template('index.html', generated_texts=generated_texts)

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)), debug=True)
